name: Build, Test, Publish NuGet

on:
  push:
    branches:
      - master
    tags:
      - "v*"

jobs:
  build-test-publish:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Detect version tag
      id: detect-version
      shell: pwsh
      run: |
        if ($env:GITHUB_REF -like 'refs/tags/v*') {
          echo "IS_TAG=true" >> $env:GITHUB_ENV
          echo "VERSION=$($env:GITHUB_REF -replace 'refs/tags/v', '')" >> $env:GITHUB_ENV
        } else {
          echo "IS_TAG=false" >> $env:GITHUB_ENV
        }

    - name: Check for release notes
      id: check-release-notes
      shell: pwsh
      run: |
        if (Test-Path release-notes.txt) {
          echo "RELEASE_NOTES_EXISTS=true" >> $env:GITHUB_ENV
          $content = Get-Content release-notes.txt -Raw
          $escaped = $content -replace "`r`n", "\n" -replace "`n", "\n"
          echo "RELEASE_NOTES=$escaped" >> $env:GITHUB_ENV
        } else {
          echo "RELEASE_NOTES_EXISTS=false" >> $env:GITHUB_ENV
        }

    - name: Update version and release notes in .csproj (only on tag)
      if: env.IS_TAG == 'true'
      shell: pwsh
      run: |
        $csproj = "CQRSMediatr/CQRSMediatr.csproj"
        (Get-Content $csproj) -replace '<Version>.*</Version>', "<Version>$env:VERSION</Version>" |
          Set-Content $csproj
        if ($env:RELEASE_NOTES_EXISTS -eq "true") {
          (Get-Content $csproj) -replace '<PackageReleaseNotes>.*</PackageReleaseNotes>', "<PackageReleaseNotes>$env:RELEASE_NOTES</PackageReleaseNotes>" |
            Set-Content $csproj
        }

    - name: Restore dependencies
      run: dotnet restore

    - name: Decode PFX Certificate
      shell: pwsh
      run: |
        [IO.File]::WriteAllBytes("mycert.pfx", [Convert]::FromBase64String("${{ secrets.NUGET_CERT_BASE64 }}"))
    
    - name: Build project
      run: dotnet build CQRSMediatr/CQRSMediatr.csproj --configuration Release --no-restore

    - name: Build test project
      run: dotnet build CQRSMediatr.Test/CQRSMediatr.Test.csproj --configuration Release
    
    - name: Run tests
      run: dotnet test CQRSMediatr.Test/CQRSMediatr.Test.csproj --configuration Release --no-build --verbosity normal

    - name: Pack NuGet package (only on tag)
      if: env.IS_TAG == 'true'
      shell: pwsh
      run: |
        if ($env:RELEASE_NOTES_EXISTS -eq "true") {
          dotnet pack CQRSMediatr/CQRSMediatr.csproj --configuration Release --no-build `
            -p:PackageVersion=$env:VERSION `
            -p:PackageReleaseNotes="$env:RELEASE_NOTES"
        } else {
          dotnet pack CQRSMediatr/CQRSMediatr.csproj --configuration Release --no-build `
            -p:PackageVersion=$env:VERSION
        }

    - name: Download nuget.exe
      if: env.IS_TAG == 'true'
      shell: pwsh
      run: |
        Invoke-WebRequest https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe

    - name: Sign NuGet package
      if: env.IS_TAG == 'true'
      shell: pwsh
      run: |
          Start-Process -FilePath ./nuget.exe -ArgumentList @(
            "sign",
            "CQRSMediatr/bin/Release/*.nupkg",
            "-CertificatePath", "mycert.pfx",
            "-CertificatePassword", "${{ secrets.CERT_PASSWORD }}",
            "-Timestamper", "http://timestamp.digicert.com"
          ) -Wait -NoNewWindow

    - name: Publish to NuGet
      if: env.IS_TAG == 'true'
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push CQRSMediatr/bin/Release/*.nupkg `
          --api-key $env:NUGET_API_KEY `
          --source https://api.nuget.org/v3/index.json
